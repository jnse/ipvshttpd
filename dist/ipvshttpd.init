#!/bin/bash
# chkconfig: 2345 90 90
# description: ipvshttpd
### BEGIN INIT INFO
# Provides: ipvshttpd
# Required-Start: network
# Required-Stop: network
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: Start ipvshttpd
### END INIT INFO
# source function library
. /etc/rc.d/init.d/functions

CMD="/usr/sbin/ipvshttpd"
NAME="ipvshttpd"
PGREP_STRING="ipvshttpd"
PID_FILE="/var/run/ipvshttpd.pid"
START_CMD="$CMD -p $PID_FILE -L syslog"
CUR_USER=`whoami`

log_success_msg() {
  echo "$*"
  logger "$_"
}

log_failure_msg() {
  echo "$*"
  logger "$_"
}

check_proc() {
  if [ -e $PID_FILE ]; then
    pgrep -F $PID_FILE > /dev/null
    return $?
  fi;
  return 1
}

start_script() {
  if [ "${UID}" != "0" ] ; then
    log_failure_msg "$NAME can only be started as 'root'."
    exit -1
  fi            
  check_proc
  if [ $? -eq 0 ]; then
    log_success_msg "$NAME is already running."
    exit 0
  fi
  # Run service
  $START_CMD
  check_proc
  if [ $? -eq 0 ]; then
    log_success_msg "Started $NAME."
    exit 0
  else    log_failure_msg "Error starting $NAME."
    exit -1
  fi
}

stop_script() {
  if [ "${UID}" != "0" ] ; then
    log_failure_msg "You do not have permission to stop $NAME."
    exit -1
  fi
  check_proc
  if [ $? -eq 0        ]; then
    PID=`cat $PID_FILE`
    if echo $PID | egrep -q '^[0-9]+$'; then
        kill $PID 
    else 
      exit -1
    fi    
    # Make sure it's dead before we return
    until [ $? -ne 0 ]; do
      sleep 1
      check_proc
    done
    check_proc
    if [ $? -eq 0           ]; then
      log_failure_msg "Error stopping $NAME."
      exit -1
    else
      log_success_msg "Stopped $NAME."
    fi  else    log_failure_msg "$NAME is not running or you don't have permission to stop it"
  fi
}

check_status() {
  check_proc
  if [ $? -eq 0 ]; then
    log_success_msg "$NAME is running."
  else    log_failure_msg "$NAME is stopped."
    exit -1
  fi
}

case "$1" in
  start)
    start_script
    ;;
  stop)
    stop_script
    ;;
  restart)
    stop_script
    start_script
    ;;
  status)
    check_status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 1
esac

exit 0

